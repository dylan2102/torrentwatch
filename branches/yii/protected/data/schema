CREATE TABLE version (
    version INTEGER
);
CREATE TABLE dvrConfig ( 
    key TEXT, 
    value TEXT , 
    dvrConfigCategory_id INTEGER
);
CREATE TABLE dvrConfigCategory ( 
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, 
    title TEXT 
);
CREATE TABLE favoriteMovies (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    genre_id INTEGER NOT NULL,
    feed_id INTEGER NOT NULL,
    rating NUMERIC NOT_NULL,
    saveIn TEXT,
    minYear INTEGER NOT NULL,
    maxYear INTEGER NOT NULL,
    queue INTEGER NOT NULL,
    FOREIGN KEY (feed_id) REFERENCES feed(id),
    FOREIGN KEY (genre_id) REFERENCES genre(id)
);
CREATE TABLE favoriteMovies_quality ( 
    favoriteMovies_id INTEGER NOT NULL, 
    quality_id INTEGER NOT NULL 
);
CREATE TABLE favoriteStrings (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    filter TEXT NOT NULL,
    notFilter TEXT,
    saveIn TEXT,
    feed_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    queue INTEGER NOT NULL
);
CREATE TABLE favoriteStrings_quality ( 
    favoriteStrings_id INTEGER NOT NULL, 
    quality_id INTEGER NOT NULL,
    FOREIGN KEY (favoriteStrings_id) REFERENCES favoriteStrings(id),
    FOREIGN KEY (quality_id) REFERENCES quality(id)
);
CREATE TABLE favoriteTvShows (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    tvShow_id INTEGER NOT NULL,
    feed_id INTEGER NOT NULL,
    saveIn TEXT,
    onlyNewer INTEGER NOT NULL,
    queue INTEGER NOT NULL,
    minSeason INTEGER NOT NULL,
    maxSeason INTEGER NOT NULL,
    minEpisode INTEGER NOT NULL,
    maxEpisode INTEGER NOT NULL
);
CREATE TABLE favoriteTvShows_quality (
  favoriteTvShows_id INTEGER NOT NULL,
  quality_id INTEGER NOT NULL,
  FOREIGN KEY (favoriteTvShows_id) REFERENCES favoriteTvShows(id),
  FOREIGN KEY (quality_id) REFERENCES quality(id)
);
CREATE TABLE feed (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    description TEXT,
    url TEXT NOT NULL, 
    status INTEGER NOT NULL DEFAULT 0, 
    lastUpdated INTEGER NOT NULL DEFAULT 0, 
    downloadType INTEGER NOT NULL, 
    userTitle TEXT
);
CREATE TABLE feedItem (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  feed_id INTEGER NOT NULL,
  tvEpisode_id INTEGER,
  url TEXT,
  title TEXT,
  description TEXT,
  status INTEGER NOT NULL,
  pubDate INTEGER NOT NULL,
  lastUpdated INTEGER NOT NULL, 
  hash TEXT, 
  imdbId INTEGER NOT NULL DEFAULT 0, 
  other_id INTEGER, 
  movie_id INTEGER, 
  downloadType INTEGER,
  FOREIGN KEY (feed_id) REFERENCES feed(id),
  FOREIGN KEY (tvEpisode_id) REFERENCES tvEpisode(id)
);
CREATE TABLE feedItem_quality (
  feedItem_id INTEGER NOT NULL,
  quality_id INTEGER NOT NULL,
  FOREIGN KEY (feedItem_id) REFERENCES feedItem(id),
  FOREIGN KEY (quality_id) REFERENCES quality(id)
);
CREATE TABLE genre (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  title TEXT NOT NULL
);
CREATE TABLE history (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  feedItem_id INTEGER NOT NULL,
  feedItem_title TEXT,
  feed_id INTEGER,
  feed_title TEXT,
  favorite_name TEXT,
  status INTEGER NOT NULL DEFAULT 0,
  date INTEGER NOT NULL,
  favorite_type TEXT
);
CREATE TABLE movie (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    imdbId INTEGER,
    status INTEGER NOT NULL DEFAULT 0,
    name TEXT,
    year TEXT,
    runtime TEXT,
    rating INTEGER,
    plot TEXT, 
    lastUpdated INTEGER,
    lastImdbUpdate INTEGER DEFAULT 0
);
CREATE TABLE movie_genre (
    movie_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES movie(id),
    FOREIGN KEY (genre_id) REFERENCES genre(id)
);
CREATE TABLE network (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL
);
CREATE TABLE other (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title TEXT, 
    status INTEGER NOT NULL DEFAULT 0, 
    lastUpdated INTEGER,
    lastImdbUpdate INTEGER NOT NULL DEFAULT 0
);
CREATE TABLE quality (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL
);
CREATE TABLE tvEpisode (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    tvShow_id INTEGER,
    season INTEGER NOT NULL, 
    episode INTEGER NOT NULL,
    title TEXT,
    description TEXT,
    lastUpdated INTEGER,
    status INTEGER, 
    firstAired INTEGER, 
    lastTvdbUpdate INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (tvShow_id) REFERENCES tvShow(id)
);
CREATE TABLE tvShow (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    network_id INTEGER,
    title TEXT,
    description TEXT, 
    rating INTEGER, 
    tvdbId INTEGER, 
    hide INTEGER,
    lastTvdbUpdate INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (network_id) REFERENCES network(id)
);
CREATE TABLE tvShow_genre (
    tvShow_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    FOREIGN KEY (tvShow_id) REFERENCES tvShow(id),
    FOREIGN KEY (genre_id) REFERENCES genre(id)
);
CREATE TABLE users (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL,
    password TEXT NOT NULL
);

CREATE VIEW tvFeedItem AS
SELECT feedItem.id feedItem_id,
       feedItem.title feedItem_title,
       feedItem.status feedItem_status,
       feedItem.url feedItem_url,
       feedItem.pubDate feedItem_pubDate,
       feedItem.downloadType feedItem_downloadType,
       feedItem.description feedItem_description,
       feedItem.feed_id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       tvEpisode.id tvEpisode_id,
       tvEpisode.season tvEpisode_season,
       tvEpisode.episode tvEpisode_episode,
       tvEpisode.status tvEpisode_status,
       tvShow.id tvShow_id,
       tvShow.title tvShow_title,
       tvShow.network_id network_id
  FROM feed, feedItem, tvEpisode, tvShow
 WHERE feedItem.tvEpisode_id = tvEpisode.id
   AND tvEpisode.tvShow_id = tvShow.id
   AND feed.id = feedItem.feed_id
 ORDER BY feedItem.pubDate DESC;

CREATE VIEW matchingFavoriteMovies AS
SELECT i.id feedItem_id,
       i.title feedItem_title,
       i.status feedItem_status,
       i.downloadType as feedItem_downloadType,
       i.url feedItem_url,
       i.pubDate feedItem_pubDate,
       feed.id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       m.id movie_id,
       m.status movie_status,
       f.name favorite_name,
       f.id favoriteMovies_id,
       f.saveIn favorite_saveIn,
       f.queue favorite_queue
  FROM favoriteMovies f, movie m, feedItem i, movie_genre mg
  LEFT OUTER JOIN feed
    ON feed.id = i.feed_id
  LEFT OUTER JOIN
       (SELECT favoriteMovies_id, count(quality_id) as count FROM favoriteMovies_quality GROUP BY favoriteMovies_id) q
    ON q.favoriteMovies_id = f.id
 WHERE i.movie_id = m.id
   AND mg.movie_id = m.id
   AND ( f.genre_id = 0
         OR
         f.genre_id = mg.genre_id
       )
   AND m.rating >= f.rating
   AND m.year BETWEEN f.minYear AND f.maxYear
   AND ( f.feed_id = 0
         OR
         f.feed_id = i.feed_id
       )
   AND ( q.count IS NULL
         OR
         q.count = ( SELECT COUNT(*)
                       FROM feedItem_quality iq, favoriteMovies_quality fq
                      WHERE i.id = iq.feedItem_id
                        AND iq.quality_id = fq.quality_id
                        AND fq.favoriteMovies_id = f.id
                   )
       );

CREATE VIEW matchingFavoriteStrings AS
SELECT i.id feedItem_id,
       i.title feedItem_title,
       i.status feedItem_status,
       i.downloadType as feedItem_downloadType,
       i.url feedItem_url,
       i.pubDate feedItem_pubDate,
       feed.id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       f.name favorite_name,
       f.id favoriteStrings_id,
       f.saveIn favorite_saveIn,
       f.queue favorite_queue
  FROM favoriteStrings f, feedItem i, feed
  LEFT OUTER JOIN
       (SELECT favoriteStrings_id, count(quality_id) as count FROM favoriteStrings_quality GROUP BY favoriteStrings_id) q
    ON q.favoriteStrings_id = f.id
 WHERE feed.id = i.feed_id
   AND ( f.feed_id = 0
         OR
         f.feed_id = i.feed_id
       )
   AND ( q.count IS NULL
         OR
         q.count = ( SELECT COUNT(*)
                       FROM feedItem_quality iq, favoriteStrings_quality fq
                      WHERE i.id = iq.feedItem_id
                        AND iq.quality_id = fq.quality_id
                        AND fq.favoriteStrings_id = f.id
                   )
       )
   AND i.title LIKE f.filter
   AND ( f.notFilter IS NULL
         OR
         i.title NOT LIKE f.notFilter
       );

CREATE VIEW matchingFavoriteTvShows AS
SELECT i.feedItem_id feedItem_id,
       i.feedItem_title feedItem_title,
       i.feedItem_status feedItem_status,
       i.feedItem_downloadType as feedItem_downloadType,
       i.feedItem_url feedItem_url,
       i.feedItem_pubDate feedItem_pubDate,
       i.feed_id feed_id,
       i.feed_url feed_url,
       i.feed_title feed_title,
       i.tvEpisode_id tvEpisode_id,
       i.tvEpisode_season tvEpisode_season,
       i.tvEpisode_episode tvEpisode_episode,
       i.tvEpisode_status tvEpisode_status,
       i.tvShow_id tvShow_id,
       i.tvShow_title favorite_name,
       f.id favoriteTvShows_id,
       f.saveIn favorite_saveIn,
       f.onlyNewer favorite_onlyNewer,
       f.queue favorite_queue
  FROM tvFeedItem i, favoriteTvShows f
  LEFT OUTER JOIN 
       (SELECT favoriteTvShows_id, count(quality_id) as count FROM favoriteTvShows_quality GROUP BY favoriteTvShows_id) q
    ON q.favoriteTvShows_id = f.id
 WHERE i.tvShow_id = f.tvShow_id
   AND ( f.feed_id = 0
         OR
         f.feed_id = i.feed_id
       )
   AND NOT i.tvEpisode_episode = 0
   AND ( f.minSeason = 0
         OR i.tvEpisode_season >= f.minSeason )
   AND ( f.maxSeason = 0
         OR i.tvEpisode_season <= f.maxSeason )
   AND ( f.minEpisode = 0
         OR i.tvEpisode_episode >= f.minEpisode )
   AND ( f.maxEpisode = 0
         OR i.tvEpisode_episode <= f.maxEpisode )
   AND ( q.count IS NULL
         OR
         q.count = ( SELECT COUNT(*)
                       FROM feedItem_quality iq, favoriteTvShows_quality fq
                      WHERE i.feedItem_id = iq.feedItem_id
                        AND iq.quality_id = fq.quality_id
                        AND fq.favoriteTvShows_id = f.id
                   )
       );

CREATE VIEW movieFeedItem AS
SELECT feedItem.id feedItem_id,
       feedItem.title feedItem_title,
       feedItem.status feedItem_status,
       feedItem.pubDate feedItem_pubDate,
       feedItem.description feedItem_description,
       feedItem.url feedItem_url,
       feedItem.feed_id feed_id,
       feed.url feed_url,
       feed.title feed_title,       movie.id as movie_id,
       movie.title as movie_title,
       movie.imdbId as movie_imdbId,
       movie.rating as movie_rating
  FROM feed, feedItem, movie
 WHERE feedItem.movie_id = movie.id
   AND feedItem.feed_id = feed.id
 ORDER BY feedItem.pubDate DESC;

CREATE VIEW newestTvEpisode AS
SELECT * 
  FROM ( SELECT *  
           FROM tvEpisode 
          ORDER BY season, episode
       ) GROUP BY tvShow_id;

CREATE VIEW onlyNewerFeedItemFilter AS
SELECT feedItem_id, feedItem_status, tvEpisode_status
  FROM matchingFavoriteTvShows m
 WHERE m.favorite_onlyNewer = 1
   AND EXISTS( SELECT id
                 FROM newestTvEpisode n
                WHERE n.tvShow_id = m.tvShow_id
                  AND ( n.season > m.tvEpisode_season
                        OR
                        ( n.season = m.tvEpisode_season 
                          AND 
                          n.episode > m.tvEpisode_episode 
                        )
                      )
             );

CREATE VIEW otherFeedItem AS
SELECT feedItem.id feedItem_id,
       feedItem.title feedItem_title,
       feedItem.status feedItem_status,
       feedItem.pubDate feedItem_pubDate,
       feedItem.description feedItem_description,
       feedItem.url feedItem_url,
       feedItem.feed_id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       other.id as other_id,
       other.title as other_title
  FROM feed, feedItem, other
 WHERE feedItem.other_id = other.id
   AND feedItem.feed_id = feed.id
 ORDER BY feedItem.pubDate DESC;

CREATE VIEW queuedFeedItem AS
SELECT f.title feed_title,
       i.status feedItem_status,
       i.description feedItem_description,
       i.id feedItem_id,
       i.title feedItem_title,
       i.pubDate feedItem_pubDate
  FROM feedItem i
  LEFT OUTER JOIN feed f
    ON i.feed_id = f.id
 WHERE i.status = 15;

CREATE VIEW recentTvShows AS 
SELECT DISTINCT tvShow.* 
  FROM ( SELECT tvEpisode.tvShow_id as tvShow_id,
                feedItem.pubDate as pubDate 
           FROM tvEpisode, feedItem 
          WHERE feedItem.tvEpisode_id=tvEpisode.id 
          ORDER BY feedItem.pubDate DESC
       ), tvShow 
 WHERE tvShow.id = tvShow_id 
 ORDER BY pubDate DESC;

CREATE INDEX favoriteMovies_quality_index ON favoriteMovies_quality (favoriteMovies_id DESC, quality_id ASC);
CREATE INDEX favoriteStrings_quality_index ON favoriteStrings_quality (favoriteStrings_id ASC, quality_id ASC);
CREATE INDEX favoriteTvShows_quality_index ON favoriteTvShows_quality (favoriteTvShows_id ASC, quality_id ASC);
CREATE INDEX feedItem_quality_index ON feedItem_quality (feedItem_id DESC, quality_id ASC);
CREATE INDEX feedItem_tvEpisode ON feedItem(tvEpisode_id, status DESC);
CREATE INDEX movie_genre_index ON movie_genre (movie_id DESC, genre_id ASC);
CREATE INDEX tvShow_genre_index ON tvShow_genre (tvShow_id DESC, genre_id ASC);
