CREATE TABLE dvrConfig ( key TEXT, value TEXT , category INTEGER, dvrConfigCategory_id INTEGER);
CREATE TABLE dvrConfigCategory ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, title TEXT );
CREATE TABLE favoriteMovies (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    genre_id INTEGER NOT NULL DEFAULT 0,
    quality_id INTEGER NOT NULL DEFAULT 0,
    rating NUMERIC NOT_NULL DEFAULT 10, saveIn TEXT, feedId INTEGER, feed_id INTEGER, minYear INTEGER NOT NULL DEFAULT 1900, maxYear INTEGER NOT NULL DEFAULT 2012,
    FOREIGN KEY (genre_id) REFERENCES genre(id)
    FOREIGN KEY (quality_id) REFERENCES quality(id)
);
CREATE TABLE favoriteMovies_quality ( favoriteMovies_id INTEGER NOT NULL, quality_id INTEGER NOT NULL );
CREATE TABLE favoriteStrings (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  filter TEXT,
  notFilter TEXT,
  saveIn TEXT,
  seedRatio NUMERIC,
  feed_id INTEGER,
  foo TEX
, name TEXT);
CREATE TABLE favoriteStrings_quality ( favoriteStrings_id INTEGER NOT NULL, quality_id INTEGER NOT NULL );
CREATE TABLE "favoriteTvShows" ("id" INTEGER PRIMARY KEY  NOT NULL ,"tvShow_id" INTEGER NOT NULL ,"feed_id" INTEGER,"saveIn" TEXT,"seedRatio" REAL,"onlyNewer" integer NOT NULL  DEFAULT 0 );
CREATE TABLE favoriteTvShows_quality (
  favoriteTvShows_id INTEGER NOT NULL,
  quality_id INTEGER NOT NULL,
  FOREIGN KEY (favoriteTvShows_id) REFERENCES favoriteTvShows(id),
  FOREIGN KEY (quality_id) REFERENCES quality(id)
);
CREATE TABLE feed (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  title VARCHAR(128),
  description TEXT,
  url VARCHAR(256) NOT NULL
, status NOT NULL DEFAULT 0, lastUpdated INTEGER NOT NULL DEFAULT 0, downloadType INTEGER, userTitle TEXT);
CREATE TABLE feedItem (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  feed_id INTEGER NOT NULL,
  tvEpisode_id INTEGER,
  url VARCHAR(256),
  title VARCHAR(128),
  description TEXT,
  status INTEGER NOT NULL,
  pubDate INTEGER NOT NULL,
  lastUpdated INTEGER NOT NULL, hash VARCHAR(32), imdbId INTEGER NOT NULL DEFAULT 0, other_id INTEGER, movie_id INTEGER, downloadType INTEGER,
  FOREIGN KEY (feed_id) REFERENCES feed(id),
  FOREIGN KEY (tvEpisode_id) REFERENCES tvEpisode(id)
);
CREATE TABLE feedItem_quality (
  feedItem_id INTEGER NOT NULL,
  quality_id INTEGER NOT NULL,
  FOREIGN KEY (feedItem_id) REFERENCES feedItem(id),
  FOREIGN KEY (quality_id) REFERENCES quality(id)
);
CREATE TABLE genre (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  title VARCHAR(128) NOT NULL
);
CREATE TABLE history (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  feedItem_id INTEGER NOT NULL,
  feedItem_title TEXT,
  feed_id INTEGER,
  feed_title TEXT,
  favorite_name TEXT,
  status INTEGER NOT NULL DEFAULT 0,
  date INTEGER NOT NULL,
  favorite_type TEXT
);
CREATE TABLE "movie" ("id" INTEGER PRIMARY KEY  NOT NULL ,"title" TEXT,"imdbId" INTEGER,"status" INTEGER NOT NULL  DEFAULT 0 ,"name" TEXT,"year" TEXT,"runtime" TEXT,"rating" NUMERIC,"plot" TEXT, "lastImdbUpdate" INTEGER DEFAULT 0);
CREATE TABLE movie_genre (
  movie_id INTEGER NOT NULL,
  genre_id INTEGER NOT NULL
);
CREATE TABLE network (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  title VARCHAR(128) NOT NULL
);
CREATE TABLE other (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  title TEXT
, status NOT NULL DEFAULT 0);
CREATE TABLE quality (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  title VARCHAR(128) NOT NULL
);
CREATE TABLE tvEpisode (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  tvShow_id INTEGER,
  season INTEGER, 
  episode INTEGER,
  title varchar(128),
  description TEXT,
  lastUpdated INTEGER,
  status INTEGER, firstAired INTEGER, lastTvdbUpdate INTEGER NOT NULL DEFAULT 0,
  FOREIGN KEY (tvShow_id) REFERENCES tvShow(id)
);
CREATE TABLE tvShow (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  network_id INTEGER,
  title VARCHAR(128),
  description TEXT, rating INTEGER, tvdbId INTEGER, lastTvdbUpdate INTEGER NOT NULL DEFAULT 0,
  FOREIGN KEY (network_id) REFERENCES network(id)
);
CREATE TABLE tvShow_genre (
  tvShow_id INTEGER NOT NULL,
  genre_id INTEGER NOT NULL,
  FOREIGN KEY (tvShow_id) REFERENCES tvShow(id),
  FOREIGN KEY (genre_id) REFERENCES genre(id)
);
CREATE TABLE users (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  username TEXT,
  password TEXT
);
CREATE VIEW tvFeedItem AS
SELECT feedItem.id feedItem_id,
       feedItem.title feedItem_title,
       feedItem.status feedItem_status,
       feedItem.url feedItem_url,
       feedItem.pubDate feedItem_pubDate,
       feedItem.downloadType feedItem_downloadType,
       feedItem.description feedItem_description,
       feedItem.feed_id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       tvEpisode.id tvEpisode_id,
       tvEpisode.season tvEpisode_season,
       tvEpisode.episode tvEpisode_episode,
       tvEpisode.status tvEpisode_status,
       tvShow.id tvShow_id,
       tvShow.title tvShow_title
  FROM feed, feedItem, tvEpisode, tvShow
 WHERE feedItem.tvEpisode_id = tvEpisode.id
   AND tvEpisode.tvShow_id = tvShow.id
   AND feed.id = feedItem.feed_id
 ORDER BY feedItem.pubDate DESC;
CREATE VIEW matchingFavoriteMovies AS
SELECT i.id feedItem_id,
       i.title feedItem_title,
       i.status feedItem_status,
       i.downloadType as feedItem_downloadType,
       i.url feedItem_url,
       feed.id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       m.id movie_id,
       m.status movie_status,
       f.name favorite_name,
       f.id favoriteMovies_id,
       f.saveIn favorite_saveIn
  FROM favoriteMovies f, movie m, feedItem i
  LEFT OUTER JOIN feed
    ON feed.id = i.feed_id
 WHERE ( f.feed_id = 0
         OR
         f.feed_id = i.feed_id
       )
   AND i.movie_id = m.id
   AND m.rating >= f.rating
   AND f.genre_id IN ( SELECT movie_genre.genre_id
                         FROM movie_genre
                        WHERE m.id = movie_genre.movie_id
                     )
   AND m.year BETWEEN f.minYear AND f.maxYear
   AND ( SELECT COUNT(fq.quality_id)
           FROM feedItem_quality iq, favoriteMovies_quality fq
          WHERE iq.feedItem_id = i.id
            AND iq.quality_id = fq.quality_id
            AND fq.favoriteMovies_id = f.id
        ) =
        ( SELECT COUNT(f.id)
            FROM favoriteMovies, favoriteMovies_quality fq
           WHERE favoriteMovies.id = f.id
             AND favoriteMovies.id = fq.favoriteMovies_id
        );
CREATE VIEW matchingFavoriteStrings AS
SELECT i.id feedItem_id,
       i.title feedItem_title,
       i.status feedItem_status,
       i.downloadType as feedItem_downloadType,
       i.url feedItem_url,
       feed.id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       f.name favorite_name,
       f.id favoriteStrings_id,
       f.saveIn favorite_saveIn
  FROM favoriteStrings f, feedItem i
  LEFT OUTER JOIN feed
    ON feed.id = i.feed_id
 WHERE ( f.feed_id = 0
         OR
         f.feed_id = i.feed_id
       )
   AND ( SELECT COUNT(fq.quality_id)
           FROM feedItem_quality iq, favoriteStrings_quality fq
          WHERE iq.feedItem_id = i.id
            AND iq.quality_id = fq.quality_id
            AND fq.favoriteStrings_id = f.id
        ) =
        ( SELECT COUNT(f.id)
            FROM favoriteStrings, favoriteStrings_quality fq
           WHERE favoriteStrings.id = f.id
             AND favoriteStrings.id = fq.favoriteStrings_id
        )
    AND i.title LIKE f.filter
    AND i.title NOT LIKE f.notFilter;
CREATE VIEW matchingFavoriteTvShows AS
SELECT i.feedItem_id feedItem_id,
       i.feedItem_title feedItem_title,
       i.feedItem_status feedItem_status,
       i.feedItem_downloadType as feedItem_downloadType,
       i.feedItem_url feedItem_url,
       i.feed_id feed_id,
       i.feed_url feed_url,
       i.feed_title feed_title,
       i.tvEpisode_id tvEpisode_id,
       i.tvEpisode_season tvEpisode_season,
       i.tvEpisode_episode tvEpisode_episode,
       i.tvEpisode_status tvEpisode_status,
       i.tvShow_id tvShow_id,
       i.tvShow_title favorite_name,
       f.id favoriteTvShows_id,
       f.saveIn favorite_saveIn,
       f.seedRatio favorite_seedRatio,
       f.onlyNewer favorite_onlyNewer
  FROM tvFeedItem i, favoriteTvShows f
  WHERE i.tvShow_id = f.tvShow_id
    AND (f.feed_id = i.feed_id OR f.feed_id = 0)
    AND (  SELECT COUNT(feedItem_quality.quality_id)
             FROM feedItem_quality, favoriteTvShows_quality
            WHERE feedItem_quality.feedItem_id = i.feedItem_id
              AND feedItem_quality.quality_id = favoriteTvShows_quality.quality_id
              AND favoriteTvShows_quality.favoriteTvShows_id = f.id
        ) =
        ( SELECT COUNT(favoriteTvShows.id)
            FROM favoriteTvShows, favoriteTvShows_quality
           WHERE favoriteTvShows.id = favoriteTvShows_quality.favoriteTvShows_id
             AND favoriteTvShows.id = f.id
        );
CREATE VIEW movieFeedItem AS
SELECT feedItem.id feedItem_id,
       feedItem.title feedItem_title,
       feedItem.status feedItem_status,
       feedItem.pubDate feedItem_pubDate,
       feedItem.description feedItem_description,
       feedItem.url feedItem_url,
       feedItem.feed_id feed_id,
       feed.url feed_url,
       feed.title feed_title,       movie.id as movie_id,
       movie.title as movie_title,
       movie.imdbId as movie_imdbId,
       movie.rating as movie_rating
  FROM feed, feedItem, movie
 WHERE feedItem.movie_id = movie.id
   AND feedItem.feed_id = feed.id
 ORDER BY feedItem.pubDate DESC;
CREATE VIEW newestTvEpisode AS select * from tvEpisode new where NOT EXISTS(select * from tvEpisode old WHERE (new.tvShow_id = old.tvShow_id AND (new.season < old.season OR (new.season = old.season AND new.episode < old.episode))));
CREATE VIEW onlyNewerFeedItemFilter AS
SELECT feedItem_id, feedItem_status, tvEpisode_status
  FROM matchingFavoriteTvShows m
 WHERE m.favorite_onlyNewer = 1
   AND EXISTS( SELECT id
                 FROM newestTvEpisode n
                WHERE n.tvShow_id = m.tvShow_id
                  AND ( n.season > m.tvEpisode_season
                        OR
                        ( n.season = m.tvEpisode_season AND n.episode > m.tvEpisode_episode )
                      )
             );
CREATE VIEW otherFeedItem AS
SELECT feedItem.id feedItem_id,
       feedItem.title feedItem_title,
       feedItem.status feedItem_status,
       feedItem.pubDate feedItem_pubDate,
       feedItem.description feedItem_description,
       feedItem.url feedItem_url,
       feedItem.feed_id feed_id,
       feed.url feed_url,
       feed.title feed_title,
       other.id as other_id,
       other.title as other_title
  FROM feed, feedItem, other
 WHERE feedItem.other_id = other.id
   AND feedItem.feed_id = feed.id
 ORDER BY feedItem.pubDate DESC;
CREATE VIEW recentTvShows AS SELECT DISTINCT tvShow.* FROM (SELECT tvEpisode.tvShow_id as tvShow_id,feedItem.pubDate as pubDate from tvEpisode, feedItem WHERE feedItem.tvEpisode_id=tvEpisode.id ORDER BY feedItem.pubDate DESC), tvShow WHERE tvShow.id = tvShow_id ORDER BY pubDate DESC;
CREATE INDEX "favoriteMovies_quality_index" ON "favoriteMovies_quality" ("favoriteMovies_id" DESC, "quality_id" ASC);
CREATE INDEX "favoriteStrings_quality_index" ON "favoriteStrings_quality" ("favoriteStrings_id" ASC, "quality_id" ASC);
CREATE INDEX "favoriteTvShows_quality_index" ON "favoriteTvShows_quality" ("favoriteTvShows_id" ASC, "quality_id" ASC);
CREATE INDEX feedItem_pubDate ON feedItem (pubDate DESC);
CREATE INDEX "feedItem_quality_index" ON "feedItem_quality" ("feedItem_id" DESC, "quality_id" ASC);
CREATE INDEX "movie_genre_index" ON "movie_genre" ("movie_id" DESC, "genre_id" ASC);
CREATE INDEX "tvShow_genre_index" ON "tvShow_genre" ("tvShow_id" DESC, "genre_id" ASC);
